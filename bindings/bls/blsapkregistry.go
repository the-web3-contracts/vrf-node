// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bls

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSApkRegistryPubkeyRegistrationParams is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistryPubkeyRegistrationParams struct {
	PubkeyRegistrationSignature BN254G1Point
	PubkeyG1                    BN254G1Point
	PubkeyG2                    BN254G2Point
}

// IBLSApkRegistryStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistryStakeTotals struct {
	TotalDappLinkStake *big.Int
	TotalBtcStake      *big.Int
}

// IBLSApkRegistryVrfNoSignerAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSApkRegistryVrfNoSignerAndSignature struct {
	NonSignerPubKeys   []BN254G1Point
	ApkG2              BN254G2Point
	Sigma              BN254G1Point
	TotalDappLinkStake *big.Int
	TotalBtcStake      *big.Int
}

// BLSApkRegistryMetaData contains all meta data concerning the BLSApkRegistry contract.
var BLSApkRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"PUBKEY_REGISTRATION_TYPEHASH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addOrRemoveBlsRegisterWhitelist\",\"inputs\":[{\"name\":\"register\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"isAdd\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"apkHistory\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"apkHash\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"},{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"blsRegisterWhitelist\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"referenceBlockNumber\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.VrfNoSignerAndSignature\",\"components\":[{\"name\":\"nonSignerPubKeys\",\"type\":\"tuple[]\",\"internalType\":\"structBN254.G1Point[]\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"totalDappLinkStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"totalBtcStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.StakeTotals\",\"components\":[{\"name\":\"totalDappLinkStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"totalBtcStake\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"currentApk\",\"inputs\":[],\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"eip712Domain\",\"inputs\":[],\"outputs\":[{\"name\":\"fields\",\"type\":\"bytes1\",\"internalType\":\"bytes1\"},{\"name\":\"name\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"version\",\"type\":\"string\",\"internalType\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"salt\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"extensions\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPubkeyHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getPubkeyRegMessageHash\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getRegisteredPubkey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_initialOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_whitelistManager\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_vrfManagerAddress\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"operatorToPubkey\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorToPubkeyHash\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pubkeyHashToOperator\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"registerBLSPublicKey\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"params\",\"type\":\"tuple\",\"internalType\":\"structIBLSApkRegistry.PubkeyRegistrationParams\",\"components\":[{\"name\":\"pubkeyRegistrationSignature\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubkeyG1\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubkeyG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}]},{\"name\":\"pubkeyRegistrationMessageHash\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"trySignatureAndApkVerification\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"apk\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"apkG2\",\"type\":\"tuple\",\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]},{\"name\":\"sigma\",\"type\":\"tuple\",\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}],\"outputs\":[{\"name\":\"pairingSuccessful\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"siganatureIsValid\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"vrfManagerAddress\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"whitelistManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"EIP712DomainChanged\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewPubkeyRegistration\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"pubkeyG1\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G1Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"Y\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"pubkeyG2\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structBN254.G2Point\",\"components\":[{\"name\":\"X\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"},{\"name\":\"Y\",\"type\":\"uint256[2]\",\"internalType\":\"uint256[2]\"}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorAdded\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorRemoved\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"InvalidInitialization\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidShortString\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"NotInitializing\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"OwnableInvalidOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"OwnableUnauthorizedAccount\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"type\":\"error\",\"name\":\"StringTooLong\",\"inputs\":[{\"name\":\"str\",\"type\":\"string\",\"internalType\":\"string\"}]}]",
	Bin: "0x6101606040523480156200001257600080fd5b50604080518082018252600e81526d424c5341706b526567697374727960901b6020808301919091528251808401909352600683526576302e302e3160d01b9083015290620000638260096200011b565b610120526200007481600a6200011b565b61014052815160208084019190912060e052815190820120610100524660a0526200010260e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c0526200011562000154565b6200043d565b60006020835110156200013b57620001338362000208565b90506200014e565b81620001488482620002fb565b5060ff90505b92915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620001a55760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620002055780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b600080829050601f815111156200023f578260405163305a27a960e01b8152600401620002369190620003c7565b60405180910390fd5b80516200024c8262000418565b179392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200027f57607f821691505b602082108103620002a057634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f6576000816000526020600020601f850160051c81016020861015620002d15750805b601f850160051c820191505b81811015620002f257828155600101620002dd565b5050505b505050565b81516001600160401b0381111562000317576200031762000254565b6200032f816200032884546200026a565b84620002a6565b602080601f8311600181146200036757600084156200034e5750858301515b600019600386901b1c1916600185901b178555620002f2565b600085815260208120601f198616915b82811015620003985788860151825594840194600190910190840162000377565b5085821015620003b75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006020808352835180602085015260005b81811015620003f757858101830151858201604001528201620003d9565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002a05760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051612ab1620004986000396000611b6501526000611b330152600061204a0152600061202201526000611f7d01526000611fa701526000611fd10152612ab16000f3fe608060405234801561001057600080fd5b506004361061014c5760003560e01c80637ff81a87116100c3578063bf79ce581161007c578063bf79ce58146103bb578063c0c53b8b146103ce578063d8cf98ca146103e1578063de29fac0146103f4578063e8bb9ae614610414578063f2fde38b1461043d57600080fd5b80637ff81a87146102ec57806384b0196e146102ff5780638da5cb5b1461031a5780639feab8591461034a578063b417b3e61461037f578063b9305e37146103a857600080fd5b806326563b401161011557806326563b40146102285780632faea61c1461023b5780633682a4501461026e57806347f0c85314610283578063626e0db5146102a3578063715018a6146102e457600080fd5b8062a1f4cb146101515780631070de84146101925780631499b662146101c5578063171f1d5b146101d35780631af8d004146101fd575b600080fd5b61017861015f366004612348565b6004602052600090815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6101a56101a03660046124bd565b610450565b604080518351815260209384015193810193909352820152606001610189565b600554600654610178919082565b6101e66101e13660046125e8565b610781565b604080519215158352901515602083015201610189565b600154610210906001600160a01b031681565b6040516001600160a01b039091168152602001610189565b600054610210906001600160a01b031681565b61025e610249366004612348565b60086020526000908152604090205460ff1681565b6040519015158152602001610189565b61028161027c366004612348565b61090b565b005b610296610291366004612348565b6109a2565b6040516101899190612639565b6102b66102b1366004612650565b610a27565b6040805167ffffffffffffffff19909416845263ffffffff9283166020850152911690820152606001610189565b610281610a64565b6101a56102fa366004612348565b610a78565b610307610b47565b60405161018997969594939291906126af565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610210565b6103717f2bd82124057f0913bc3b772ce7b83e8057c1ad1f3510fc83778be20f10ec5de681565b604051908152602001610189565b61037161038d366004612348565b6001600160a01b031660009081526002602052604090205490565b6102816103b6366004612748565b610b8d565b6103716103c9366004612784565b610c70565b6102816103dc3660046127e1565b61110a565b6102816103ef366004612348565b611254565b610371610402366004612348565b60026020526000908152604090205481565b610210610422366004612650565b6003602052600090815260409020546001600160a01b031681565b61028161044b366004612348565b6112eb565b604080518082019091526000808252602082015260004363ffffffff1684106104e65760405162461bcd60e51b815260206004820152603c60248201527f424c535369676e6174757265436865636b65722e636865636b5369676e61747560448201527f7265733a20696e76616c6964207265666572656e636520626c6f636b0000000060648201526084015b60405180910390fd5b6040805180820190915260008082526020820152835151606090156106055784515167ffffffffffffffff8111156105205761052061236a565b604051908082528060200260200182016040528015610549578160200160208202803683370190505b50905060005b8551518110156105ff576105918660000151828151811061057257610572612824565b6020026020010151805160009081526020918201519091526040902090565b8282815181106105a3576105a3612824565b6020026020010181815250506105f56105d8876000015183815181106105cb576105cb612824565b6020026020010151611329565b6040805180820190915260055481526006546020820152906113c4565b925060010161054f565b5061061f565b604080518082019091526005548152600654602082015291505b600080610636898589602001518a60400151610781565b91509150816106b95760405162461bcd60e51b815260206004820152604360248201527f424c535369676e6174757265436865636b65722e636865636b5369676e61747560448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a4016104dd565b8061072c5760405162461bcd60e51b815260206004820152603960248201527f424c535369676e6174757265436865636b65722e636865636b5369676e61747560448201527f7265733a207369676e617475726520697320696e76616c69640000000000000060648201526084016104dd565b6000888460405160200161074192919061283a565b60408051601f19818403018152828252805160209182012083830190925260608b0151835260808b01519083015290975095505050505050935093915050565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878760000151886020015188600001516000600281106107c9576107c9612824565b60200201518951600160200201518a602001516000600281106107ee576107ee612824565b60200201518b6020015160016002811061080a5761080a612824565b602090810291909101518c518d8301516040516108679a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c61088a9190612876565b90506108fd6108a361089c8884611461565b86906113c4565b6108ab6114ea565b6108f36108e4856108de604080518082018252600080825260209182015281518083019092526001825260029082015290565b90611461565b6108ed8c6115aa565b906113c4565b886201d4c0611639565b909890975095505050505050565b6001546001600160a01b031633146109355760405162461bcd60e51b81526004016104dd90612898565b600061094082610a78565b50905061094c81611853565b6001600160a01b038216600081815260026020908152604091829020548251938452908301527f1012e33559dd6c66686972872c5e7d4953b63b46a144935dd149c29819b67d5b91015b60405180910390a15050565b6040805180820190915260008082526020820152610a21610a1c7f2bd82124057f0913bc3b772ce7b83e8057c1ad1f3510fc83778be20f10ec5de684604051602001610a019291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405280519060200120611a33565b6115aa565b92915050565b60078181548110610a3757600080fd5b600091825260209091200154604081901b915063ffffffff600160c01b8204811691600160e01b90041683565b610a6c611a60565b610a766000611abb565b565b60408051808201909152600080825260208201526001600160a01b0382166000818152600460209081526040808320815180830183528154815260019091015481840152938352600290915281205490919080610b3d5760405162461bcd60e51b815260206004820152603e60248201527f424c5341706b52656769737472792e676574526567697374657265645075626b60448201527f65793a206f70657261746f72206973206e6f742072656769737465726564000060648201526084016104dd565b9094909350915050565b600060608060008060006060610b5b611b2c565b610b63611b5e565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6000546001600160a01b03163314610bb75760405162461bcd60e51b81526004016104dd90612898565b6001600160a01b038216610c455760405162461bcd60e51b815260206004820152604960248201527f424c5341706b52656769737472792e6164644f7252656d6f766572426c73526560448201527f67697374657257686974656c6973743a206f70657261746f722061646472657360648201526873206973207a65726f60b81b608482015260a4016104dd565b6001600160a01b03919091166000908152600860205260409020805460ff1916911515919091179055565b3360009081526008602052604081205460ff16610d095760405162461bcd60e51b81526020600482015260596024820152600080516020612a3c83398151915260448201527f4b65793a207468697320616464726573732068617665206e6f74207065726d6960648201527f7373696f6e20746f20726567697374657220626c73206b657900000000000000608482015260a4016104dd565b6000610d37610d203686900386016040870161290a565b805160009081526020918201519091526040902090565b90507fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb58103610dbe576040805162461bcd60e51b8152602060048201526024810191909152600080516020612a3c83398151915260448201527f4b65793a2063616e6e6f74207265676973746572207a65726f207075626b657960648201526084016104dd565b6001600160a01b03851660009081526002602052604090205415610e485760405162461bcd60e51b81526020600482015260476024820152600080516020612a3c83398151915260448201527f4b65793a206f70657261746f7220616c72656164792072656769737465726564606482015266207075626b657960c81b608482015260a4016104dd565b6000818152600360205260409020546001600160a01b031615610ecc5760405162461bcd60e51b81526020600482015260426024820152600080516020612a3c83398151915260448201527f4b65793a207075626c6963206b657920616c7265616479207265676973746572606482015261195960f21b608482015260a4016104dd565b604080516000917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000191610f25918835916020808b0135928b01359160608c01359160808d019160c08e01918d35918e8201359101612926565b6040516020818303038152906040528051906020012060001c610f489190612876565b9050610fd6610f75610f66836108de368a90038a0160408b0161290a565b6108ed3689900389018961290a565b610f7d6114ea565b610fbf610fb0856108de604080518082018252600080825260209182015281518083019092526001825260029082015290565b6108ed368a90038a018a61290a565b610fd1368a90038a0160808b01612968565b611b8b565b6110715760405162461bcd60e51b815260206004820152606c6024820152600080516020612a3c83398151915260448201527f4b65793a2065697468657220746865204731207369676e61747572652069732060648201527f77726f6e672c206f7220473120616e642047322070726976617465206b65792060848201526b0c8de40dcdee840dac2e8c6d60a31b60a482015260c4016104dd565b6001600160a01b03861660008181526004602090815260408083208982018035825560608b01356001909201919091556002835281842087905586845260039092529182902080546001600160a01b0319168417905590517fe3fb6613af2e8930cf85d47fcf6db10192224a64c6cbe8023e0eee1ba3828041916110f99160808a0190612984565b60405180910390a250949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156111505750825b905060008267ffffffffffffffff16600114801561116d5750303b155b90508115801561117b575080155b156111995760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156111c357845460ff60401b1916600160401b1785555b6111cc88611abb565b600080546001600160a01b03808a166001600160a01b0319928316179092556001805492891692909116919091179055611204611def565b831561124a57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b6001546001600160a01b0316331461127e5760405162461bcd60e51b81526004016104dd90612898565b600061128982610a78565b50905061129d61129882611329565b611853565b6001600160a01b038216600081815260026020908152604091829020548251938452908301527fd7fc6178490520705355c7c3941d247da7890efa312e3366fe195e176c0e9e809101610996565b6112f3611a60565b6001600160a01b03811661131d57604051631e4fbdf760e01b8152600060048201526024016104dd565b61132681611abb565b50565b6040805180820190915260008082526020820152815115801561134e57506020820151155b1561136c575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020612a5c833981519152846020015161139f9190612876565b6113b790600080516020612a5c8339815191526129c4565b905292915050565b919050565b60408051808201909152600080825260208201526113e0612257565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa9050808061141b57fe5b50806114595760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b60448201526064016104dd565b505092915050565b604080518082019091526000808252602082015261147d612275565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa905080806114ac57fe5b50806114595760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b60448201526064016104dd565b6114f2612293565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820190915260008082526020820152600080806115da600080516020612a5c83398151915286612876565b90505b6115e681611eee565b9093509150600080516020612a5c833981519152828309830361161f576040805180820190915290815260208101919091529392505050565b600080516020612a5c8339815191526001820890506115dd565b60408051808201825286815260208082018690528251808401909352868352820184905260009182919061166b6122b8565b60005b60028110156118265760006116848260066129d7565b905084826002811061169857611698612824565b602002015151836116aa8360006129ee565b600c81106116ba576116ba612824565b60200201528482600281106116d1576116d1612824565b602002015160200151838260016116e891906129ee565b600c81106116f8576116f8612824565b602002015283826002811061170f5761170f612824565b60200201515151836117228360026129ee565b600c811061173257611732612824565b602002015283826002811061174957611749612824565b60200201515160016020020151836117628360036129ee565b600c811061177257611772612824565b602002015283826002811061178957611789612824565b6020020151602001516000600281106117a4576117a4612824565b6020020151836117b58360046129ee565b600c81106117c5576117c5612824565b60200201528382600281106117dc576117dc612824565b6020020151602001516001600281106117f7576117f7612824565b6020020151836118088360056129ee565b600c811061181857611818612824565b60200201525060010161166e565b5061182f6122d7565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b604080518082019091526000808252602082015260075460008190036118e15760405162461bcd60e51b815260206004820152603760248201527f424c5341706b52656769737472792e5f70726f6365737341706b55706461746560448201527f3a2071756f72756d20646f6573206e6f7420657869737400000000000000000060648201526084016104dd565b604080518082019091526005548152600654602082015261190290846113c4565b8051600581905560208083018051600655600092835251905260408120919350600761192f6001856129c4565b8154811061193f5761193f612824565b6000918252602090912001805490915063ffffffff438116600160c01b909204160361197e5780546001600160c01b031916604083901c178155611a2c565b805463ffffffff438116600160e01b8181026001600160e01b039485161785556040805160608101825267ffffffffffffffff198816815260208101938452600081830181815260078054600181018255925291517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688909101805495519251871690940291909516600160c01b026001600160e01b0319949094169490911c93909317919091179092161790555b5050505050565b6000610a21611a40611f70565b8360405161190160f01b8152600281019290925260228201526042902090565b33611a927f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b031614610a765760405163118cdaa760e01b81523360048201526024016104dd565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6060611b597f0000000000000000000000000000000000000000000000000000000000000000600961209b565b905090565b6060611b597f0000000000000000000000000000000000000000000000000000000000000000600a61209b565b604080518082018252858152602080820185905282518084019093528583528201839052600091611bba6122b8565b60005b6002811015611d75576000611bd38260066129d7565b9050848260028110611be757611be7612824565b60200201515183611bf98360006129ee565b600c8110611c0957611c09612824565b6020020152848260028110611c2057611c20612824565b60200201516020015183826001611c3791906129ee565b600c8110611c4757611c47612824565b6020020152838260028110611c5e57611c5e612824565b6020020151515183611c718360026129ee565b600c8110611c8157611c81612824565b6020020152838260028110611c9857611c98612824565b6020020151516001602002015183611cb18360036129ee565b600c8110611cc157611cc1612824565b6020020152838260028110611cd857611cd8612824565b602002015160200151600060028110611cf357611cf3612824565b602002015183611d048360046129ee565b600c8110611d1457611d14612824565b6020020152838260028110611d2b57611d2b612824565b602002015160200151600160028110611d4657611d46612824565b602002015183611d578360056129ee565b600c8110611d6757611d67612824565b602002015250600101611bbd565b50611d7e6122d7565b60006020826101808560086107d05a03fa90508080611d9957fe5b5080611ddf5760405162461bcd60e51b81526020600482015260156024820152741c185a5c9a5b99cb5bdc18dbd9194b59985a5b1959605a1b60448201526064016104dd565b5051151598975050505050505050565b60075415611e585760405162461bcd60e51b815260206004820152603060248201527f424c5341706b52656769737472792e696e697469616c697a6541706b3a20617060448201526f6b20616c72656164792065786973747360801b60648201526084016104dd565b6040805160608101825260008082524363ffffffff9081166020840190815283850183815260078054600181018255945293517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6889093018054915194519390951c6001600160e01b031990911617600160c01b93821693909302929092176001600160e01b0316600160e01b9190921602179055565b60008080600080516020612a5c8339815191526003600080516020612a5c83398151915286600080516020612a5c833981519152888909090890506000611f64827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52600080516020612a5c833981519152612147565b91959194509092505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611fc957507f000000000000000000000000000000000000000000000000000000000000000046145b15611ff357507f000000000000000000000000000000000000000000000000000000000000000090565b611b59604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b606060ff83146120b5576120ae836121f0565b9050610a21565b8180546120c190612a01565b80601f01602080910402602001604051908101604052809291908181526020018280546120ed90612a01565b801561213a5780601f1061210f5761010080835404028352916020019161213a565b820191906000526020600020905b81548152906001019060200180831161211d57829003601f168201915b5050505050905092915050565b6000806121526122d7565b61215a6122f5565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa9250828061219757fe5b50826121e55760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c75726500000000000060448201526064016104dd565b505195945050505050565b606060006121fd8361222f565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f811115610a2157604051632cd44ac360e21b815260040160405180910390fd5b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806122a6612313565b81526020016122b3612313565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b80356001600160a01b03811681146113bf57600080fd5b60006020828403121561235a57600080fd5b61236382612331565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156123a3576123a361236a565b60405290565b60405160a0810167ffffffffffffffff811182821017156123a3576123a361236a565b604051601f8201601f1916810167ffffffffffffffff811182821017156123f5576123f561236a565b604052919050565b60006040828403121561240f57600080fd5b612417612380565b9050813581526020820135602082015292915050565b600082601f83011261243e57600080fd5b612446612380565b80604084018581111561245857600080fd5b845b8181101561247257803584526020938401930161245a565b509095945050505050565b60006080828403121561248f57600080fd5b612497612380565b90506124a3838361242d565b81526124b2836040840161242d565b602082015292915050565b6000806000606084860312156124d257600080fd5b83359250602080850135925060408086013567ffffffffffffffff808211156124fa57600080fd5b90870190610120828a03121561250f57600080fd5b6125176123a9565b82358281111561252657600080fd5b8301601f81018b1361253757600080fd5b8035838111156125495761254961236a565b612557878260051b016123cc565b818152878101945060069190911b82018701908c82111561257757600080fd5b918701915b8183101561259d5761258e8d846123fd565b8552938701939186019161257c565b8352506125ae90508a84870161247d565b858201526125bf8a60a085016123fd565b604082015260e08301356060820152610100830135608082015280955050505050509250925092565b60008060008061012085870312156125ff57600080fd5b8435935061261086602087016123fd565b925061261f866060870161247d565b915061262e8660e087016123fd565b905092959194509250565b815181526020808301519082015260408101610a21565b60006020828403121561266257600080fd5b5035919050565b6000815180845260005b8181101561268f57602081850181015186830182015201612673565b506000602082860101526020601f19601f83011685010191505092915050565b60ff60f81b881681526000602060e060208401526126d060e084018a612669565b83810360408501526126e2818a612669565b606085018990526001600160a01b038816608086015260a0850187905284810360c08601528551808252602080880193509091019060005b818110156127365783518352928401929184019160010161271a565b50909c9b505050505050505050505050565b6000806040838503121561275b57600080fd5b61276483612331565b91506020830135801515811461277957600080fd5b809150509250929050565b600080600083850361016081121561279b57600080fd5b6127a485612331565b9350610100601f19820112156127b957600080fd5b602085019250604061011f19820112156127d257600080fd5b50610120840190509250925092565b6000806000606084860312156127f657600080fd5b6127ff84612331565b925061280d60208501612331565b915061281b60408501612331565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b8281526000602080830184516020860160005b828110156128695781518452928401929084019060010161284d565b5091979650505050505050565b60008261289357634e487b7160e01b600052601260045260246000fd5b500690565b6020808252604c908201527f424c5341706b52656769737472792e6f6e6c7952656c617965724d616e61676560408201527f723a2063616c6c6572206973206e6f74207468652072656c61796572206d616e60608201526b61676572206164647265737360a01b608082015260a00190565b60006040828403121561291c57600080fd5b61236383836123fd565b888152876020820152866040820152856060820152604085608083013760408460c0830137610100810192909252610120820152610140019695505050505050565b60006080828403121561297a57600080fd5b612363838361247d565b823581526020808401359082015260c0810160408381840137604080840160808401379392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a2157610a216129ae565b8082028115828204841417610a2157610a216129ae565b80820180821115610a2157610a216129ae565b600181811c90821680612a1557607f821691505b602082108103612a3557634e487b7160e01b600052602260045260246000fd5b5091905056fe424c5341706b52656769737472792e7265676973746572424c535075626c696330644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122043af7cbf58b0e3be89403979ff15c55bcdd2bdf8e1ba680435725cbab59c527664736f6c63430008160033",
}

// BLSApkRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use BLSApkRegistryMetaData.ABI instead.
var BLSApkRegistryABI = BLSApkRegistryMetaData.ABI

// BLSApkRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BLSApkRegistryMetaData.Bin instead.
var BLSApkRegistryBin = BLSApkRegistryMetaData.Bin

// DeployBLSApkRegistry deploys a new Ethereum contract, binding an instance of BLSApkRegistry to it.
func DeployBLSApkRegistry(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BLSApkRegistry, error) {
	parsed, err := BLSApkRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BLSApkRegistryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BLSApkRegistry{BLSApkRegistryCaller: BLSApkRegistryCaller{contract: contract}, BLSApkRegistryTransactor: BLSApkRegistryTransactor{contract: contract}, BLSApkRegistryFilterer: BLSApkRegistryFilterer{contract: contract}}, nil
}

// BLSApkRegistry is an auto generated Go binding around an Ethereum contract.
type BLSApkRegistry struct {
	BLSApkRegistryCaller     // Read-only binding to the contract
	BLSApkRegistryTransactor // Write-only binding to the contract
	BLSApkRegistryFilterer   // Log filterer for contract events
}

// BLSApkRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BLSApkRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BLSApkRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BLSApkRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BLSApkRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BLSApkRegistrySession struct {
	Contract     *BLSApkRegistry   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BLSApkRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BLSApkRegistryCallerSession struct {
	Contract *BLSApkRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BLSApkRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BLSApkRegistryTransactorSession struct {
	Contract     *BLSApkRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BLSApkRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BLSApkRegistryRaw struct {
	Contract *BLSApkRegistry // Generic contract binding to access the raw methods on
}

// BLSApkRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BLSApkRegistryCallerRaw struct {
	Contract *BLSApkRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// BLSApkRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BLSApkRegistryTransactorRaw struct {
	Contract *BLSApkRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBLSApkRegistry creates a new instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistry(address common.Address, backend bind.ContractBackend) (*BLSApkRegistry, error) {
	contract, err := bindBLSApkRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistry{BLSApkRegistryCaller: BLSApkRegistryCaller{contract: contract}, BLSApkRegistryTransactor: BLSApkRegistryTransactor{contract: contract}, BLSApkRegistryFilterer: BLSApkRegistryFilterer{contract: contract}}, nil
}

// NewBLSApkRegistryCaller creates a new read-only instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryCaller(address common.Address, caller bind.ContractCaller) (*BLSApkRegistryCaller, error) {
	contract, err := bindBLSApkRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryCaller{contract: contract}, nil
}

// NewBLSApkRegistryTransactor creates a new write-only instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*BLSApkRegistryTransactor, error) {
	contract, err := bindBLSApkRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryTransactor{contract: contract}, nil
}

// NewBLSApkRegistryFilterer creates a new log filterer instance of BLSApkRegistry, bound to a specific deployed contract.
func NewBLSApkRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*BLSApkRegistryFilterer, error) {
	contract, err := bindBLSApkRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryFilterer{contract: contract}, nil
}

// bindBLSApkRegistry binds a generic wrapper to an already deployed contract.
func bindBLSApkRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BLSApkRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BLSApkRegistry *BLSApkRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BLSApkRegistry.Contract.BLSApkRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BLSApkRegistry *BLSApkRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.BLSApkRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BLSApkRegistry *BLSApkRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.BLSApkRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BLSApkRegistry *BLSApkRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BLSApkRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BLSApkRegistry *BLSApkRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BLSApkRegistry *BLSApkRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.contract.Transact(opts, method, params...)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) PUBKEYREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "PUBKEY_REGISTRATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _BLSApkRegistry.Contract.PUBKEYREGISTRATIONTYPEHASH(&_BLSApkRegistry.CallOpts)
}

// PUBKEYREGISTRATIONTYPEHASH is a free data retrieval call binding the contract method 0x9feab859.
//
// Solidity: function PUBKEY_REGISTRATION_TYPEHASH() view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) PUBKEYREGISTRATIONTYPEHASH() ([32]byte, error) {
	return _BLSApkRegistry.Contract.PUBKEYREGISTRATIONTYPEHASH(&_BLSApkRegistry.CallOpts)
}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistryCaller) ApkHistory(opts *bind.CallOpts, arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "apkHistory", arg0)

	outstruct := new(struct {
		ApkHash               [24]byte
		UpdateBlockNumber     uint32
		NextUpdateBlockNumber uint32
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ApkHash = *abi.ConvertType(out[0], new([24]byte)).(*[24]byte)
	outstruct.UpdateBlockNumber = *abi.ConvertType(out[1], new(uint32)).(*uint32)
	outstruct.NextUpdateBlockNumber = *abi.ConvertType(out[2], new(uint32)).(*uint32)

	return *outstruct, err

}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistrySession) ApkHistory(arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	return _BLSApkRegistry.Contract.ApkHistory(&_BLSApkRegistry.CallOpts, arg0)
}

// ApkHistory is a free data retrieval call binding the contract method 0x626e0db5.
//
// Solidity: function apkHistory(uint256 ) view returns(bytes24 apkHash, uint32 updateBlockNumber, uint32 nextUpdateBlockNumber)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) ApkHistory(arg0 *big.Int) (struct {
	ApkHash               [24]byte
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
}, error) {
	return _BLSApkRegistry.Contract.ApkHistory(&_BLSApkRegistry.CallOpts, arg0)
}

// BlsRegisterWhitelist is a free data retrieval call binding the contract method 0x2faea61c.
//
// Solidity: function blsRegisterWhitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistryCaller) BlsRegisterWhitelist(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "blsRegisterWhitelist", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// BlsRegisterWhitelist is a free data retrieval call binding the contract method 0x2faea61c.
//
// Solidity: function blsRegisterWhitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistrySession) BlsRegisterWhitelist(arg0 common.Address) (bool, error) {
	return _BLSApkRegistry.Contract.BlsRegisterWhitelist(&_BLSApkRegistry.CallOpts, arg0)
}

// BlsRegisterWhitelist is a free data retrieval call binding the contract method 0x2faea61c.
//
// Solidity: function blsRegisterWhitelist(address ) view returns(bool)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) BlsRegisterWhitelist(arg0 common.Address) (bool, error) {
	return _BLSApkRegistry.Contract.BlsRegisterWhitelist(&_BLSApkRegistry.CallOpts, arg0)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x1070de84.
//
// Solidity: function checkSignatures(bytes32 msgHash, uint256 referenceBlockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, referenceBlockNumber *big.Int, params IBLSApkRegistryVrfNoSignerAndSignature) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "checkSignatures", msgHash, referenceBlockNumber, params)

	if err != nil {
		return *new(IBLSApkRegistryStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSApkRegistryStakeTotals)).(*IBLSApkRegistryStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x1070de84.
//
// Solidity: function checkSignatures(bytes32 msgHash, uint256 referenceBlockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) CheckSignatures(msgHash [32]byte, referenceBlockNumber *big.Int, params IBLSApkRegistryVrfNoSignerAndSignature) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	return _BLSApkRegistry.Contract.CheckSignatures(&_BLSApkRegistry.CallOpts, msgHash, referenceBlockNumber, params)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x1070de84.
//
// Solidity: function checkSignatures(bytes32 msgHash, uint256 referenceBlockNumber, ((uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint256,uint256) params) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) CheckSignatures(msgHash [32]byte, referenceBlockNumber *big.Int, params IBLSApkRegistryVrfNoSignerAndSignature) (IBLSApkRegistryStakeTotals, [32]byte, error) {
	return _BLSApkRegistry.Contract.CheckSignatures(&_BLSApkRegistry.CallOpts, msgHash, referenceBlockNumber, params)
}

// CurrentApk is a free data retrieval call binding the contract method 0x1499b662.
//
// Solidity: function currentApk() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCaller) CurrentApk(opts *bind.CallOpts) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "currentApk")

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CurrentApk is a free data retrieval call binding the contract method 0x1499b662.
//
// Solidity: function currentApk() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistrySession) CurrentApk() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.CurrentApk(&_BLSApkRegistry.CallOpts)
}

// CurrentApk is a free data retrieval call binding the contract method 0x1499b662.
//
// Solidity: function currentApk() view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) CurrentApk() (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.CurrentApk(&_BLSApkRegistry.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistryCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistrySession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BLSApkRegistry.Contract.Eip712Domain(&_BLSApkRegistry.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _BLSApkRegistry.Contract.Eip712Domain(&_BLSApkRegistry.CallOpts)
}

// GetPubkeyHash is a free data retrieval call binding the contract method 0xb417b3e6.
//
// Solidity: function getPubkeyHash(address operator) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) GetPubkeyHash(opts *bind.CallOpts, operator common.Address) ([32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "getPubkeyHash", operator)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetPubkeyHash is a free data retrieval call binding the contract method 0xb417b3e6.
//
// Solidity: function getPubkeyHash(address operator) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) GetPubkeyHash(operator common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.GetPubkeyHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetPubkeyHash is a free data retrieval call binding the contract method 0xb417b3e6.
//
// Solidity: function getPubkeyHash(address operator) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) GetPubkeyHash(operator common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.GetPubkeyHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetPubkeyRegMessageHash is a free data retrieval call binding the contract method 0x47f0c853.
//
// Solidity: function getPubkeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistryCaller) GetPubkeyRegMessageHash(opts *bind.CallOpts, operator common.Address) (BN254G1Point, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "getPubkeyRegMessageHash", operator)

	if err != nil {
		return *new(BN254G1Point), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)

	return out0, err

}

// GetPubkeyRegMessageHash is a free data retrieval call binding the contract method 0x47f0c853.
//
// Solidity: function getPubkeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistrySession) GetPubkeyRegMessageHash(operator common.Address) (BN254G1Point, error) {
	return _BLSApkRegistry.Contract.GetPubkeyRegMessageHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetPubkeyRegMessageHash is a free data retrieval call binding the contract method 0x47f0c853.
//
// Solidity: function getPubkeyRegMessageHash(address operator) view returns((uint256,uint256))
func (_BLSApkRegistry *BLSApkRegistryCallerSession) GetPubkeyRegMessageHash(operator common.Address) (BN254G1Point, error) {
	return _BLSApkRegistry.Contract.GetPubkeyRegMessageHash(&_BLSApkRegistry.CallOpts, operator)
}

// GetRegisteredPubkey is a free data retrieval call binding the contract method 0x7ff81a87.
//
// Solidity: function getRegisteredPubkey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) GetRegisteredPubkey(opts *bind.CallOpts, operator common.Address) (BN254G1Point, [32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "getRegisteredPubkey", operator)

	if err != nil {
		return *new(BN254G1Point), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(BN254G1Point)).(*BN254G1Point)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// GetRegisteredPubkey is a free data retrieval call binding the contract method 0x7ff81a87.
//
// Solidity: function getRegisteredPubkey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) GetRegisteredPubkey(operator common.Address) (BN254G1Point, [32]byte, error) {
	return _BLSApkRegistry.Contract.GetRegisteredPubkey(&_BLSApkRegistry.CallOpts, operator)
}

// GetRegisteredPubkey is a free data retrieval call binding the contract method 0x7ff81a87.
//
// Solidity: function getRegisteredPubkey(address operator) view returns((uint256,uint256), bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) GetRegisteredPubkey(operator common.Address) (BN254G1Point, [32]byte, error) {
	return _BLSApkRegistry.Contract.GetRegisteredPubkey(&_BLSApkRegistry.CallOpts, operator)
}

// OperatorToPubkey is a free data retrieval call binding the contract method 0x00a1f4cb.
//
// Solidity: function operatorToPubkey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCaller) OperatorToPubkey(opts *bind.CallOpts, arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "operatorToPubkey", arg0)

	outstruct := new(struct {
		X *big.Int
		Y *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.X = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Y = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// OperatorToPubkey is a free data retrieval call binding the contract method 0x00a1f4cb.
//
// Solidity: function operatorToPubkey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistrySession) OperatorToPubkey(arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.OperatorToPubkey(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubkey is a free data retrieval call binding the contract method 0x00a1f4cb.
//
// Solidity: function operatorToPubkey(address ) view returns(uint256 X, uint256 Y)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) OperatorToPubkey(arg0 common.Address) (struct {
	X *big.Int
	Y *big.Int
}, error) {
	return _BLSApkRegistry.Contract.OperatorToPubkey(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubkeyHash is a free data retrieval call binding the contract method 0xde29fac0.
//
// Solidity: function operatorToPubkeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCaller) OperatorToPubkeyHash(opts *bind.CallOpts, arg0 common.Address) ([32]byte, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "operatorToPubkeyHash", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OperatorToPubkeyHash is a free data retrieval call binding the contract method 0xde29fac0.
//
// Solidity: function operatorToPubkeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) OperatorToPubkeyHash(arg0 common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.OperatorToPubkeyHash(&_BLSApkRegistry.CallOpts, arg0)
}

// OperatorToPubkeyHash is a free data retrieval call binding the contract method 0xde29fac0.
//
// Solidity: function operatorToPubkeyHash(address ) view returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) OperatorToPubkeyHash(arg0 common.Address) ([32]byte, error) {
	return _BLSApkRegistry.Contract.OperatorToPubkeyHash(&_BLSApkRegistry.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) Owner() (common.Address, error) {
	return _BLSApkRegistry.Contract.Owner(&_BLSApkRegistry.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) Owner() (common.Address, error) {
	return _BLSApkRegistry.Contract.Owner(&_BLSApkRegistry.CallOpts)
}

// PubkeyHashToOperator is a free data retrieval call binding the contract method 0xe8bb9ae6.
//
// Solidity: function pubkeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) PubkeyHashToOperator(opts *bind.CallOpts, arg0 [32]byte) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "pubkeyHashToOperator", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PubkeyHashToOperator is a free data retrieval call binding the contract method 0xe8bb9ae6.
//
// Solidity: function pubkeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) PubkeyHashToOperator(arg0 [32]byte) (common.Address, error) {
	return _BLSApkRegistry.Contract.PubkeyHashToOperator(&_BLSApkRegistry.CallOpts, arg0)
}

// PubkeyHashToOperator is a free data retrieval call binding the contract method 0xe8bb9ae6.
//
// Solidity: function pubkeyHashToOperator(bytes32 ) view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) PubkeyHashToOperator(arg0 [32]byte) (common.Address, error) {
	return _BLSApkRegistry.Contract.PubkeyHashToOperator(&_BLSApkRegistry.CallOpts, arg0)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_BLSApkRegistry *BLSApkRegistryCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_BLSApkRegistry *BLSApkRegistrySession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _BLSApkRegistry.Contract.TrySignatureAndApkVerification(&_BLSApkRegistry.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _BLSApkRegistry.Contract.TrySignatureAndApkVerification(&_BLSApkRegistry.CallOpts, msgHash, apk, apkG2, sigma)
}

// VrfManagerAddress is a free data retrieval call binding the contract method 0x1af8d004.
//
// Solidity: function vrfManagerAddress() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) VrfManagerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "vrfManagerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VrfManagerAddress is a free data retrieval call binding the contract method 0x1af8d004.
//
// Solidity: function vrfManagerAddress() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) VrfManagerAddress() (common.Address, error) {
	return _BLSApkRegistry.Contract.VrfManagerAddress(&_BLSApkRegistry.CallOpts)
}

// VrfManagerAddress is a free data retrieval call binding the contract method 0x1af8d004.
//
// Solidity: function vrfManagerAddress() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) VrfManagerAddress() (common.Address, error) {
	return _BLSApkRegistry.Contract.VrfManagerAddress(&_BLSApkRegistry.CallOpts)
}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCaller) WhitelistManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BLSApkRegistry.contract.Call(opts, &out, "whitelistManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistrySession) WhitelistManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.WhitelistManager(&_BLSApkRegistry.CallOpts)
}

// WhitelistManager is a free data retrieval call binding the contract method 0x26563b40.
//
// Solidity: function whitelistManager() view returns(address)
func (_BLSApkRegistry *BLSApkRegistryCallerSession) WhitelistManager() (common.Address, error) {
	return _BLSApkRegistry.Contract.WhitelistManager(&_BLSApkRegistry.CallOpts)
}

// AddOrRemoveBlsRegisterWhitelist is a paid mutator transaction binding the contract method 0xb9305e37.
//
// Solidity: function addOrRemoveBlsRegisterWhitelist(address register, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) AddOrRemoveBlsRegisterWhitelist(opts *bind.TransactOpts, register common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "addOrRemoveBlsRegisterWhitelist", register, isAdd)
}

// AddOrRemoveBlsRegisterWhitelist is a paid mutator transaction binding the contract method 0xb9305e37.
//
// Solidity: function addOrRemoveBlsRegisterWhitelist(address register, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) AddOrRemoveBlsRegisterWhitelist(register common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.AddOrRemoveBlsRegisterWhitelist(&_BLSApkRegistry.TransactOpts, register, isAdd)
}

// AddOrRemoveBlsRegisterWhitelist is a paid mutator transaction binding the contract method 0xb9305e37.
//
// Solidity: function addOrRemoveBlsRegisterWhitelist(address register, bool isAdd) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) AddOrRemoveBlsRegisterWhitelist(register common.Address, isAdd bool) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.AddOrRemoveBlsRegisterWhitelist(&_BLSApkRegistry.TransactOpts, register, isAdd)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xd8cf98ca.
//
// Solidity: function deregisterOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "deregisterOperator", operator)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xd8cf98ca.
//
// Solidity: function deregisterOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) DeregisterOperator(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.DeregisterOperator(&_BLSApkRegistry.TransactOpts, operator)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xd8cf98ca.
//
// Solidity: function deregisterOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) DeregisterOperator(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.DeregisterOperator(&_BLSApkRegistry.TransactOpts, operator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whitelistManager, address _vrfManagerAddress) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) Initialize(opts *bind.TransactOpts, _initialOwner common.Address, _whitelistManager common.Address, _vrfManagerAddress common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "initialize", _initialOwner, _whitelistManager, _vrfManagerAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whitelistManager, address _vrfManagerAddress) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) Initialize(_initialOwner common.Address, _whitelistManager common.Address, _vrfManagerAddress common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.Initialize(&_BLSApkRegistry.TransactOpts, _initialOwner, _whitelistManager, _vrfManagerAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0xc0c53b8b.
//
// Solidity: function initialize(address _initialOwner, address _whitelistManager, address _vrfManagerAddress) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) Initialize(_initialOwner common.Address, _whitelistManager common.Address, _vrfManagerAddress common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.Initialize(&_BLSApkRegistry.TransactOpts, _initialOwner, _whitelistManager, _vrfManagerAddress)
}

// RegisterBLSPublicKey is a paid mutator transaction binding the contract method 0xbf79ce58.
//
// Solidity: function registerBLSPublicKey(address operator, ((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2])) params, (uint256,uint256) pubkeyRegistrationMessageHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryTransactor) RegisterBLSPublicKey(opts *bind.TransactOpts, operator common.Address, params IBLSApkRegistryPubkeyRegistrationParams, pubkeyRegistrationMessageHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "registerBLSPublicKey", operator, params, pubkeyRegistrationMessageHash)
}

// RegisterBLSPublicKey is a paid mutator transaction binding the contract method 0xbf79ce58.
//
// Solidity: function registerBLSPublicKey(address operator, ((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2])) params, (uint256,uint256) pubkeyRegistrationMessageHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistrySession) RegisterBLSPublicKey(operator common.Address, params IBLSApkRegistryPubkeyRegistrationParams, pubkeyRegistrationMessageHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterBLSPublicKey(&_BLSApkRegistry.TransactOpts, operator, params, pubkeyRegistrationMessageHash)
}

// RegisterBLSPublicKey is a paid mutator transaction binding the contract method 0xbf79ce58.
//
// Solidity: function registerBLSPublicKey(address operator, ((uint256,uint256),(uint256,uint256),(uint256[2],uint256[2])) params, (uint256,uint256) pubkeyRegistrationMessageHash) returns(bytes32)
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RegisterBLSPublicKey(operator common.Address, params IBLSApkRegistryPubkeyRegistrationParams, pubkeyRegistrationMessageHash BN254G1Point) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterBLSPublicKey(&_BLSApkRegistry.TransactOpts, operator, params, pubkeyRegistrationMessageHash)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) RegisterOperator(opts *bind.TransactOpts, operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "registerOperator", operator)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) RegisterOperator(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterOperator(&_BLSApkRegistry.TransactOpts, operator)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x3682a450.
//
// Solidity: function registerOperator(address operator) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RegisterOperator(operator common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RegisterOperator(&_BLSApkRegistry.TransactOpts, operator)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistrySession) RenounceOwnership() (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RenounceOwnership(&_BLSApkRegistry.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.RenounceOwnership(&_BLSApkRegistry.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistrySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.TransferOwnership(&_BLSApkRegistry.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BLSApkRegistry *BLSApkRegistryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BLSApkRegistry.Contract.TransferOwnership(&_BLSApkRegistry.TransactOpts, newOwner)
}

// BLSApkRegistryEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the BLSApkRegistry contract.
type BLSApkRegistryEIP712DomainChangedIterator struct {
	Event *BLSApkRegistryEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryEIP712DomainChanged represents a EIP712DomainChanged event raised by the BLSApkRegistry contract.
type BLSApkRegistryEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*BLSApkRegistryEIP712DomainChangedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryEIP712DomainChangedIterator{contract: _BLSApkRegistry.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryEIP712DomainChanged)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseEIP712DomainChanged(log types.Log) (*BLSApkRegistryEIP712DomainChanged, error) {
	event := new(BLSApkRegistryEIP712DomainChanged)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the BLSApkRegistry contract.
type BLSApkRegistryInitializedIterator struct {
	Event *BLSApkRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryInitialized represents a Initialized event raised by the BLSApkRegistry contract.
type BLSApkRegistryInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*BLSApkRegistryInitializedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryInitializedIterator{contract: _BLSApkRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryInitialized)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseInitialized(log types.Log) (*BLSApkRegistryInitialized, error) {
	event := new(BLSApkRegistryInitialized)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryNewPubkeyRegistrationIterator is returned from FilterNewPubkeyRegistration and is used to iterate over the raw logs and unpacked data for NewPubkeyRegistration events raised by the BLSApkRegistry contract.
type BLSApkRegistryNewPubkeyRegistrationIterator struct {
	Event *BLSApkRegistryNewPubkeyRegistration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryNewPubkeyRegistrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryNewPubkeyRegistration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryNewPubkeyRegistration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryNewPubkeyRegistrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryNewPubkeyRegistrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryNewPubkeyRegistration represents a NewPubkeyRegistration event raised by the BLSApkRegistry contract.
type BLSApkRegistryNewPubkeyRegistration struct {
	Operator common.Address
	PubkeyG1 BN254G1Point
	PubkeyG2 BN254G2Point
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterNewPubkeyRegistration is a free log retrieval operation binding the contract event 0xe3fb6613af2e8930cf85d47fcf6db10192224a64c6cbe8023e0eee1ba3828041.
//
// Solidity: event NewPubkeyRegistration(address indexed operator, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterNewPubkeyRegistration(opts *bind.FilterOpts, operator []common.Address) (*BLSApkRegistryNewPubkeyRegistrationIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "NewPubkeyRegistration", operatorRule)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryNewPubkeyRegistrationIterator{contract: _BLSApkRegistry.contract, event: "NewPubkeyRegistration", logs: logs, sub: sub}, nil
}

// WatchNewPubkeyRegistration is a free log subscription operation binding the contract event 0xe3fb6613af2e8930cf85d47fcf6db10192224a64c6cbe8023e0eee1ba3828041.
//
// Solidity: event NewPubkeyRegistration(address indexed operator, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchNewPubkeyRegistration(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryNewPubkeyRegistration, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "NewPubkeyRegistration", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryNewPubkeyRegistration)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "NewPubkeyRegistration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPubkeyRegistration is a log parse operation binding the contract event 0xe3fb6613af2e8930cf85d47fcf6db10192224a64c6cbe8023e0eee1ba3828041.
//
// Solidity: event NewPubkeyRegistration(address indexed operator, (uint256,uint256) pubkeyG1, (uint256[2],uint256[2]) pubkeyG2)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseNewPubkeyRegistration(log types.Log) (*BLSApkRegistryNewPubkeyRegistration, error) {
	event := new(BLSApkRegistryNewPubkeyRegistration)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "NewPubkeyRegistration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryOperatorAddedIterator is returned from FilterOperatorAdded and is used to iterate over the raw logs and unpacked data for OperatorAdded events raised by the BLSApkRegistry contract.
type BLSApkRegistryOperatorAddedIterator struct {
	Event *BLSApkRegistryOperatorAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryOperatorAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryOperatorAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryOperatorAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryOperatorAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryOperatorAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryOperatorAdded represents a OperatorAdded event raised by the BLSApkRegistry contract.
type BLSApkRegistryOperatorAdded struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorAdded is a free log retrieval operation binding the contract event 0x1012e33559dd6c66686972872c5e7d4953b63b46a144935dd149c29819b67d5b.
//
// Solidity: event OperatorAdded(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterOperatorAdded(opts *bind.FilterOpts) (*BLSApkRegistryOperatorAddedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "OperatorAdded")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryOperatorAddedIterator{contract: _BLSApkRegistry.contract, event: "OperatorAdded", logs: logs, sub: sub}, nil
}

// WatchOperatorAdded is a free log subscription operation binding the contract event 0x1012e33559dd6c66686972872c5e7d4953b63b46a144935dd149c29819b67d5b.
//
// Solidity: event OperatorAdded(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchOperatorAdded(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryOperatorAdded) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "OperatorAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryOperatorAdded)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorAdded is a log parse operation binding the contract event 0x1012e33559dd6c66686972872c5e7d4953b63b46a144935dd149c29819b67d5b.
//
// Solidity: event OperatorAdded(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseOperatorAdded(log types.Log) (*BLSApkRegistryOperatorAdded, error) {
	event := new(BLSApkRegistryOperatorAdded)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "OperatorAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryOperatorRemovedIterator is returned from FilterOperatorRemoved and is used to iterate over the raw logs and unpacked data for OperatorRemoved events raised by the BLSApkRegistry contract.
type BLSApkRegistryOperatorRemovedIterator struct {
	Event *BLSApkRegistryOperatorRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryOperatorRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryOperatorRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryOperatorRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryOperatorRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryOperatorRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryOperatorRemoved represents a OperatorRemoved event raised by the BLSApkRegistry contract.
type BLSApkRegistryOperatorRemoved struct {
	Operator   common.Address
	OperatorId [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOperatorRemoved is a free log retrieval operation binding the contract event 0xd7fc6178490520705355c7c3941d247da7890efa312e3366fe195e176c0e9e80.
//
// Solidity: event OperatorRemoved(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterOperatorRemoved(opts *bind.FilterOpts) (*BLSApkRegistryOperatorRemovedIterator, error) {

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "OperatorRemoved")
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryOperatorRemovedIterator{contract: _BLSApkRegistry.contract, event: "OperatorRemoved", logs: logs, sub: sub}, nil
}

// WatchOperatorRemoved is a free log subscription operation binding the contract event 0xd7fc6178490520705355c7c3941d247da7890efa312e3366fe195e176c0e9e80.
//
// Solidity: event OperatorRemoved(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchOperatorRemoved(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryOperatorRemoved) (event.Subscription, error) {

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "OperatorRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryOperatorRemoved)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorRemoved is a log parse operation binding the contract event 0xd7fc6178490520705355c7c3941d247da7890efa312e3366fe195e176c0e9e80.
//
// Solidity: event OperatorRemoved(address operator, bytes32 operatorId)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseOperatorRemoved(log types.Log) (*BLSApkRegistryOperatorRemoved, error) {
	event := new(BLSApkRegistryOperatorRemoved)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "OperatorRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BLSApkRegistryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BLSApkRegistry contract.
type BLSApkRegistryOwnershipTransferredIterator struct {
	Event *BLSApkRegistryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BLSApkRegistryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BLSApkRegistryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BLSApkRegistryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BLSApkRegistryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BLSApkRegistryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BLSApkRegistryOwnershipTransferred represents a OwnershipTransferred event raised by the BLSApkRegistry contract.
type BLSApkRegistryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BLSApkRegistryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BLSApkRegistryOwnershipTransferredIterator{contract: _BLSApkRegistry.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BLSApkRegistryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BLSApkRegistry.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BLSApkRegistryOwnershipTransferred)
				if err := _BLSApkRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BLSApkRegistry *BLSApkRegistryFilterer) ParseOwnershipTransferred(log types.Log) (*BLSApkRegistryOwnershipTransferred, error) {
	event := new(BLSApkRegistryOwnershipTransferred)
	if err := _BLSApkRegistry.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
